# Generated by Django 5.0.3 on 2024-03-26 03:57

import datetime
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(default=0, verbose_name='Широта точки на карте')),
                ('longitude', models.FloatField(default=0, verbose_name='Долгота точки на карте')),
                ('address', models.CharField(max_length=100, verbose_name='Адрес автомойки')),
                ('work_time_start', models.TimeField(default=datetime.time(9, 0), verbose_name='Время начала работы автомойки')),
                ('work_time_end', models.TimeField(default=datetime.time(22, 0), verbose_name='Время конца работы автомойки')),
                ('slots_amount', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)], verbose_name='Макс. кол-во одновременных обслуживаний')),
            ],
            options={
                'verbose_name': 'Адрес автомойки',
                'verbose_name_plural': 'Адреса автомоек',
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mark', models.CharField(default='', max_length=100, verbose_name='Марка авто')),
                ('model', models.CharField(default='', max_length=100, verbose_name='Модель авто')),
                ('number', models.CharField(max_length=100, verbose_name='Номер авто')),
            ],
            options={
                'verbose_name': 'Авто',
                'verbose_name_plural': 'Авто',
            },
        ),
        migrations.CreateModel(
            name='CarClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название класса авто')),
            ],
            options={
                'verbose_name': 'Класс авто',
                'verbose_name_plural': 'Классы авто',
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=100, verbose_name='Наименование')),
                ('discount', models.FloatField(default=0.0, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)], verbose_name='Скидка при этом способе оплаты')),
            ],
            options={
                'verbose_name': 'Способ оплаты',
                'verbose_name_plural': 'Способы оплаты',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название услуги')),
                ('is_special', models.BooleanField(default=False, verbose_name='Специальная')),
                ('has_loyalty', models.BooleanField(default=False, verbose_name='Участвует в программе лояльности')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
            },
        ),
        migrations.CreateModel(
            name='UserChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram', models.CharField(max_length=255, verbose_name='Никнейм тг')),
                ('chat', models.CharField(max_length=255, verbose_name='Айди чата')),
            ],
            options={
                'verbose_name': 'Чат',
                'verbose_name_plural': 'Чаты',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='ФИО')),
                ('telegram', models.CharField(max_length=100, null=True, verbose_name='Телеграм никнейм')),
                ('phone_number', models.CharField(max_length=20, null=True, verbose_name='Номер телефона')),
                ('is_registration_complete', models.BooleanField(default=False, verbose_name='Регистрация подтверждена')),
                ('bot_welcome_message_sent', models.BooleanField(default=False)),
                ('bot_registration_complete_message_sent', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('car', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.car', verbose_name='Авто')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='car',
            name='car_class',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.carclass', verbose_name='Класс авто'),
        ),
        migrations.CreateModel(
            name='CarClassHasServicePrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Стоимость услуги')),
                ('carClass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.carclass', verbose_name='Класс автомобиля')),
            ],
            options={
                'verbose_name': 'Стоимость по классу авто',
                'verbose_name_plural': 'Стоимость по классу авто',
            },
        ),
        migrations.CreateModel(
            name='Checkout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('target_datetime', models.DateTimeField(default=None, null=True, verbose_name='Время записи')),
                ('takes_time', models.IntegerField(default=0, verbose_name='Примерное время выполнения, минут')),
                ('started', models.BooleanField(default=False, verbose_name='Принят к выполнению')),
                ('status', models.BooleanField(default=False, verbose_name='Завершен')),
                ('canceled', models.BooleanField(default=False, verbose_name='Отменен клиентом')),
                ('postponed', models.BooleanField(default=False, verbose_name='Клиент опаздывает')),
                ('bonuses_received', models.BooleanField(default=False, verbose_name='Бонусы по программе лояльности были начислены')),
                ('final_price', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Стоимость заказа')),
                ('user_review', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Отзыв клиента')),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.address', verbose_name='Адрес')),
                ('services_list', models.ManyToManyField(to='main.carclasshasserviceprice', verbose_name='Услуги')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Клиент')),
                ('payment_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.paymenttype', verbose_name='Способ оплаты')),
            ],
            options={
                'verbose_name': 'Заказ услуги',
                'verbose_name_plural': 'Заказы услуг',
            },
        ),
        migrations.CreateModel(
            name='ServicePrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.address', verbose_name='Адрес автомойки')),
                ('priceLink', models.ManyToManyField(related_name='%(class)s_link', through='main.CarClassHasServicePrice', to='main.carclass')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.service', verbose_name='Услуга')),
            ],
            options={
                'verbose_name': 'Стоимость услуги',
                'verbose_name_plural': 'Стоимости услуг',
            },
        ),
        migrations.AddField(
            model_name='carclasshasserviceprice',
            name='servicePrice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.serviceprice', verbose_name='Стоимость услуги'),
        ),
        migrations.CreateModel(
            name='ServiceUserLoyalty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loyalty_count', models.IntegerField(default=0, verbose_name='Кол-во совершенных заказов')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.service', verbose_name='Услуга')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Заказчик')),
            ],
            options={
                'verbose_name': 'Лояльность пользователя',
                'verbose_name_plural': 'Лояльности пользователей',
            },
        ),
    ]
